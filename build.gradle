plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.google.cloud.tools.jib' version '3.1.2'
}

group = 'com.hidiscuss'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	// Swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

	//spring security oauth2
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
  
	// Github REST API Client
	implementation 'org.kohsuke:github-api:1.303'

	//spring security oauth2
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'

}

tasks.named('test') {
	useJUnitPlatform()
}

// clean task 실행시 QClass 삭제
clean {
	delete file('src/main/generated')
}


def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--short', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

jib {
	// 도커 베이스 이미지
	from {
		image = "gcr.io/distroless/java11-debian11"
		platforms {
			platform {
				architecture = "arm64"
				os = "linux"
			}
			platform {
				architecture = 'amd64'
				os = 'linux'
			}
		}
	}
	/*
	 로컬 빌드 시 아래 명령어 사용
	 gradle jibBuildTar
	 */
	to {
		image = "075730933478.dkr.ecr.ap-northeast-2.amazonaws.com/backend-spring"
		tags = ["latest", "${getGitHash()}"]
	}
	container {
		appRoot = "/app"
		jvmFlags = ["-Xms128m", "-Xmx128m", "-Dspring.profiles.active=prod"]
		creationTime = "USE_CURRENT_TIMESTAMP"
		ports = ['8080']
		environment = [SPRING_CONFIG_LOCATION:"file:/app/config/*/application.yml"]
	}
}
